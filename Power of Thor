import java.util.*;
import java.io.*;
import java.math.*;

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 * ---
 * Hint: You can use the debug stream to print initialTX and initialTY, if Thor seems not follow your orders.
 **/
class Player {
    private static String goDiag[] = {"NE", "NW", "SW", "SE"};
    private static String goX[] = {"E", "W", "W", "E"};
    private static String goY[] = {"N", "N", "S", "S"};
    
    public static int checkDistance(int x, int y)
    {
        int tempX = Math.abs(x);
        int tempY = Math.abs(y);
        
        if (tempX < tempY)
            return -1;
        else if (tempX == tempY)
            return 0;
        else
            return 1;
        
        //return 0;
    }
      
    public static int findMinDis(int x, int y)
    {
        int tempX = Math.abs(x);
        int tempY = Math.abs(y);
        
        if (tempX < tempY)
            return x;
        else if (tempX == tempY)
            return x;
        else
            return y;
        
        //return 0;
    }
        
    public static int findQuarter(int disX, int disY)
    {
        if ((disX == 0) && (disY == 0))
            return 0;
            
        if (disX >= 0)
        {
            if (disY >= 0)
                return 1;
            else if (disY < 0)
                return 4;
        }
        else if (disX < 0)
        {
            if (disY >= 0)
                return 2;
            else if (disY < 0)
                return 3;
        }
        
        return 0;
    }
    
        
    public static void main(String args[]) {
        
        // game loop
        while (true) {
            Scanner in = new Scanner(System.in);
            int lightX = in.nextInt() - 20; // the X position of the light of power
            int lightY = - in.nextInt() + 9; // the Y position of the light of power
            int initialTX = in.nextInt() - 20; // Thor's starting X position
            int initialTY = - in.nextInt() + 9; // Thor's starting Y position

            int remainingTurns = in.nextInt(); // The remaining amount of turns Thor can move. Do not remove this line.

            // Write an action using System.out.println()
            // To debug: System.err.println("Debug messages...");

            //Vector<String> route = new Vector<>();
            
            int distanceX = lightX - initialTX;
            int distanceY = lightY - initialTY;
            
            int minDis = findMinDis(distanceX, distanceY);
            int absMinDis = Math.abs(minDis);
            int absDisDis = Math.abs(distanceX - distanceY);
            int nextX = initialTX + minDis;
            int nextY = initialTY + minDis;
                
            int quarter = findQuarter(distanceX, distanceY) - 1;
            
            if (distanceX == 0)
            {
                int temp = Math.abs(distanceY);
                for (int i = 0; i < temp; i++)
                    System.out.println(goY[quarter]);
                
                return;
            }
            
            if (distanceY == 0)
            {
                int temp = Math.abs(distanceX);
                for (int i = 0; i < temp; i++)
                    System.out.println(goX[quarter]);
                
                return;
            }
            
            int check = checkDistance(distanceX, distanceY);
            switch(check)
            {
                case -1:
                    for (int i = 0; i < absMinDis; i++)
                    {
                        System.out.println(goDiag[quarter]);
                    }
                    
                    for (int i = 0; i < absDisDis; i++)
                    {
                        System.out.println(goY[quarter]);
                    }
                    
                    break;
                    
                case 0:
                    for (int i = 0; i < absMinDis; i++)
                    {
                        System.out.println(goDiag[quarter]);
                    }
                
                    break;
                    
                case 1:
                    for (int i = 0; i < absMinDis; i++)
                    {
                        System.out.println(goDiag[quarter]);
                    }
                    
                    for (int i = 0; i < absDisDis; i++)
                    {
                        System.out.println(goX[quarter]);
                    }
                    
                    break;
                
                default:
                    break;
            }
            // A single line providing the move to be made: N NE E SE S SW W or NW
            //System.out.println("SE");
        }
    }
}
